# useful comment
name: terratest

on:
  push:
    branches:
    - main
  pull_request:
    branches:
      - main

jobs:
  detect-and-test:
    runs-on: ubuntu-latest
    env:
      EXCLUDED_DIRS: ".github" #space-delimited list for multiple exclusions

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # TODO: Determine changed_files match what is expected
    - name: Get changed dir
      id: changed-dir
      run: |
        changed_dirs=$(git diff --name-only origin/${{ github.event.repository.default_branch }} origin/${{ github.head_ref }} | xargs dirname | sort | uniq)
        for dir in $EXCLUDED_DIRS; do
          changed_dirs=$(echo "$changed_dirs" | grep -v "^$dir")
        done
        cat $changed_dirs
        echo "changed_dirs=$changed_dirs" >> $changed_dirs
    
    - run: echo ${{ env.changed_dirs }}

    # - name: Set up Go
    #   uses: actions/setup-go@v4
    #   with:
    #     go-version: '1.17'

    # TODO: Determine changed_files match what is expected
    # - name: Get changed files
    #   id: changed-files
    #   run: |
    #     echo "Changed files:"
    #     git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
    #     cat changed_files.txt
        

    # TODO: Test dir looping
    # - name: Determine directories to test
    #   id: directories-to-test
    #   run: |
    #     # Initialize an empty list of directories
    #     DIRECTORIES=""

    #     # Loop through each changed file
    #     while read FILE; do
    #       # Check if the file is within a Terraform directory
    #       if [[ "$FILE" == infrastructure/terraform/* ]]; then
    #         # Extract the directory path
    #         DIR=$(dirname "$FILE")
    #         # Add the directory to the list if not already added
    #         if [[ ! "$DIRECTORIES" =~ "$DIR" ]]; then
    #           DIRECTORIES="$DIRECTORIES $DIR"
    #         fi
    #       fi
    #     done < changed_files.txt

    #     # Output the list of directories
    #     echo "directories-to-test=$DIRECTORIES" >> $GITHUB_ENV
    #     echo "Directories to test: $DIRECTORIES"

    # - name: Run Terratest
    #   run: |
    #     for DIR in ${{ env.directories-to-test }}; do
    #       cd $DIR
    #       go mod download
    #       terraform init
    #       go test -v ./test/...
    #       cd - # Go back to the previous directory
    #     done

    # TODO: determine best way to pair success runs with commit hash, and store in dir that was ran against. Succeed workflow if recorded hash is before the one that was successful
    # - name: Upload Test Results
    #   if: failure()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: test-results
    #     path: /path/to/test-results
